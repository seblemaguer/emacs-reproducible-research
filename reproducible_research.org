#+TITLE: Reproducible with research with emacs (and org-mode)
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: slemaguer@coli.uni-saarland.de
#+DATE: 12 May 2017
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil  \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
# #+SETUPFILE: ~/environment/src/non-install-utils/org-html-themes/setup/theme-bigblow.setup

# ##############################################################################################################################
# #+REVEAL_MATHJAX_URL: http://localhost:8000/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
# ##############################################################################################################################

# ##############################################################################################################################
#+REVEAL_THEME: w3c
#+REVEAL_TRANS: none
#+REVEAL_INIT_SCRIPT: width: "100%",
#+REVEAL_INIT_SCRIPT: height: "100%",
#+REVEAL_INIT_SCRIPT: margin: 0,
#+REVEAL_INIT_SCRIPT: minScale: 1,
#+REVEAL_INIT_SCRIPT: maxScale: 1,
#+REVEAL_PLUGINS: (markdown highlight)
#+OPTIONS: reveal_progress:t, reveal_history:nil, reveal_control:nil, reveal_center:nil
# ##############################################################################################################################

# ##############################################################################################################################
#+STARTUP: beamer
#+STARTUP: oddeven
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [9pt]
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+BEAMER_THEME: progressbar
#+LATEX_CMD: xelatex
#+LaTeX_HEADER: \hypersetup{
#+LaTeX_HEADER:   colorlinks = true,
#+LaTeX_HEADER:   linkcolor = black
#+LaTeX_HEADER: }
#+latex_header: \usepackage{subfig}
#+LaTeX_HEADER: \usepackage{bibentry}
#+LaTeX_HEADER: \usepackage{multimedia}
#+LaTeX_HEADER: \makeatletter
#+LaTeX_HEADER: \let\@mycite\@cite
#+LaTeX_HEADER: \def\@cite#1#2{{\hypersetup{linkcolor=green!60!black}[{#1\if@tempswa , #2\fi}]}}
#+LaTeX_HEADER: \makeatother

# ##############################################################################################################################

# ##############################################################################################################################
# Local Variables:
# ispell-check-comments: exclusive
# ispell-local-dictionary: "american"
# End:
# ##############################################################################################################################


* Introduction [100%]
** DONE Introduction
CLOSED: [2017-05-29 Mon 13:37]
#+begin_quote
*What do I mean by reproducible research*

- *Being able to reproduce experiments*
- Identify the state of the experiments (what has been done/what remains to be done)
- Understand the process which leads to the current state
#+end_quote

#+begin_quote
*Why using emacs ?*
- Because you have all the tools to help you in this editor
#+end_quote

#+begin_quote
*Some pre-requisite*
- Linux ubuntu 16.04 / bash
#+end_quote
* Emacs basics [100%]
** DONE General informations
CLOSED: [2017-05-16 Tue 21:24]
- Global informations
  - EMACS = Editor MACroS
  - Development started during the 70s
  - Multiple variation *GNU Emacs*, XEmacs, AquaMacs...
  - Compatible Unix-Like (*Linux*, macos, ...) + windows
  - Configuration = based on a dedicated language: emacs lisp
- Global key concepts
  - 3 modifier keys = CTRL, MAJ, META
  - META = alt on PC,  command on MAC
- Commands = instructions to run. Can be associated with shortcuts!
- minibuffer: where commands are launched/messages are indicated
** DONE Graphic overview with a legend
CLOSED: [2017-05-30 Tue 19:03]
- 1 file: build.gradle
- 3 buffers: build.gradle, *scratch*, *Messages*
  - *scratch* is a special buffer for scratch notes
  - *Messages* is a special buffer which contains all the messages sent by emacs
- 3 windows: 1 at the top, 2 at the bottom
- 1 frame: emacs-bin@slemaguer-perso
- 1 minibuffer indicating the message "Beginning of buffer"

#+ATTR_HTML: :width 35%
[[file:assets/images/emacs_concepts.png]]
** DONE Major mode / minor mode
CLOSED: [2017-05-28 Sun 09:20]
- Emacs adaptation = modes
- 2 kind of modes: major and minor
- 1 buffer = 1 major mode + N minor modes
  - major mode = editing behavior (syntax coloring, indentation, ...)
  - minor mode = specific adaptations (matching parenthesis, spell/syntax checking, ...)
- Help key = C-h m
  - List all the mode enabled in the buffer + some documentation
  - Example

# #+include: "~/work/courses/current/teaching/reproducible-research/assets/example_mode_help" example
** DONE Emacs configuration
CLOSED: [2017-05-17 Wed 13:31]
- Global
  - Configuration language = *elisp* (emacs lisp)
  - Programming language \Rightarrow a little bit of investment....
  - ....but powerful
- Entry point = ~/.emacs or ~/.emacs.d/init.el
  - You can put everything there...
  - Or import other files
  - *Not the focus of this course*: a baseline configuration will be provided later
* Hands-on emacs [100%]
** DONE Environment preparation
CLOSED: [2017-05-17 Wed 12:50]
- Pre-configuration
  - Package installation (ubuntu)
#+begin_src sh
  sudo apt-get install build-essential libglib2.0-dev imagemagick libgtk-3-dev libpoppler-dev libpoppler-glib-dev libxpm-dev libtiff-dev libjpeg-dev libgif-dev
#+end_src
  - Copy the following the following profile into ~/.profile : https://raw.githubusercontent.com/seblemaguer/emacs-reproducible-research/master/assets/configuration/profile
  - For future use Adapt your bashrc by adding
#+begin_src sh
# Include profile variables
source ~/.profile
#+end_src
  - For the current session, write in the current terminal
#+begin_src sh
source ~/.profile
echo $PATH # Check that the path is correct
#+end_src
** DONE Compilation/installation/running
CLOSED: [2017-05-17 Wed 12:51]
  - Compilation/installation
    1. Retrieve the installation shell script: [[https://raw.githubusercontent.com/seblemaguer/emacs-reproducible-research/master/assets/scripts/emacs_install.sh]]
    2. Execute the shell script with the following syntax
#+begin_src sh
bash emacs_install.sh -j 2 $HOME/environment/local
#+end_src
- Running
#+begin_src sh
emacs
#+end_src
** DONE The most important keys in the world ! (or maybe not but still)
CLOSED: [2017-05-29 Mon 21:28]
- Emacs relies *massively* on shortcuts (but are not mandatory !)
- M-x = starting a command (that is the only mandatory one)
- C-h m (mode), C-h k (keys), C-h f (function) = documentation shortcut
- C-x f (open), C-x s (save), C-x w (save as) = open file/save buffer
- C-<space> (set/unset selection mark), M-w (copy), C-w (cut), C-y (paste)
- refcard = https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf
** DONE Having fun for 5min :D
CLOSED: [2017-05-16 Tue 22:11]
*** Try to do this
- Open some source code file (java, python, c, ...)
- Open some tex file
- Query the documentation, ...
*** Some feedback ?
- What is easy ?
- What is difficult ?
- Do you have an idea of how to improve
*** Some questions ?
- Don't hesitate to be exhaustive or say if you don't understand something
* Hands-on configured emacs [100%]
** DONE Package management
CLOSED: [2017-05-17 Wed 13:06]
- *use-package* = helper to install and *configure* a package
  - URL = https://github.com/jwiegley/use-package/
  - A baseline example
#+begin_src emacs-lisp
  (use-package spaceline-all-the-icons ;; The package to install
    :ensure t ;; Force the installation
    :after spaceline ;; Initialisation after the given package

    ;; Preconfiguration, *before* the package is loaded
    :init

    (setq spaceline-all-the-icons-separator-type 'wave
          spaceline-separator-dir-left '(left . left)
          spaceline-separator-dir-right '(right . right)
          spaceline-minor-modes-separator " ")

    ;; Configuration, *after* the package is loaded
    :config

    (spaceline-all-the-icons-theme)
    (require 'spaceline-config)
    (spaceline-helm-mode)
    (use-package info+
      :ensure t
      :init
      (spaceline-info-mode))

    (use-package fancy-battery
      :ensure t
      :init
      (add-hook 'after-init-hook #'fancy-battery-mode)
      (display-battery-mode -1))

    (spaceline-all-the-icons--setup-paradox)
    )
#+end_src
- To list available packages use the command: =list-packages=
** DONE Install a baseline configuration
CLOSED: [2017-05-31 Wed 00:44]
- Retrieve the following file: https://raw.githubusercontent.com/seblemaguer/emacs-reproducible-research/master/assets/configuration/init.el
- Copy it into =~/.emacs.d/init.el=
- Open emacs, it should look like that:
#+ATTR_HTML: :width 40%
[[./assets/images/emacs_configured.png]]
** DONE Some main functionalities
CLOSED: [2017-05-29 Mon 21:33]
- Buffer management
  - Using C-x C-b to open the ibuffer list
- File/directory management
  - Using C-x C-r to list the recently opened files
  - Using C-x C-d to list directories
- VC/Project management (see the next section)
  - Main shortcut = <f4>
- Agenda management (see the section about org-mode)
  - Main shortcut = <f12>
** DONE Having fun for 5min
CLOSED: [2017-05-16 Tue 22:11]
- Try to open some source code file (java, python, c, ...)
- Try to open some tex file
- Try to query the documentation, ...
- *Try to spot the differences*
** DONE Bonus: configure a server/client architecture
CLOSED: [2017-05-29 Mon 21:32]
- Why? because it's faster :)
- How to:
  1. Retrieve the following shell script: https://raw.githubusercontent.com/seblemaguer/emacs-reproducible-research/master/assets/scripts/server_adapt.sh
  2. Execute the shell script with the following syntax
#+begin_src sh
bash server_adapt.sh -j 2 $HOME/environment/local
#+end_src
- On the configuration part
  1. Uncomment the "server part" in the init.el file
- Try to run the emacs command
* Project/scm [100%]
** DONE Project management
CLOSED: [2017-05-18 Thu 13:39]
- Multiple tools available but we focus on *projectile*
- Repository = https://github.com/bbatsov/projectile
- Idea:
#+begin_quote
 The concept of a project is pretty basic - just a folder containing
 special file. Currently git, mercurial, darcs and bazaar repos are
 considered projects by default. So are lein, maven, sbt, scons, rebar
 and bundler projects.
#+end_quote
- Prefix : C-x p (see configuration file)
- Some useful commands
  - C-c p f = open file *in the project*
  - C-c p h = open helm to manipulate projectile
** DONE Projectile - example
CLOSED: [2017-05-30 Tue 19:04]
- DEMO
** DONE Git
CLOSED: [2017-05-18 Thu 13:50]
- Main tools is *magit*
  - Repository = https://github.com/magit/magit
  - Lots of avantages:
    - All the functionality
    - Easy to use
    - Interface with github (magithub = https://github.com/vermiculus/magithub/)
  - Entry command = =magit-status=
- History of a file
  - Tool = magit-timemachine
  - Repository = https://github.com/pidu/git-timemachine
  - Command = =git-timemachine=
** DONE Magit - example
CLOSED: [2017-05-30 Tue 19:04]
- DEMO
** DONE Git-timemachine - example
CLOSED: [2017-05-30 Tue 19:04]
- DEMO
* Org-mode - Introduction [100%]
** DONE General informations
CLOSED: [2017-05-19 Fri 16:10]
#+begin_quote
Org mode is for keeping notes, maintaining TODO lists, planning
projects, and authoring documents with a fast and effective plain-text
system.
#+end_quote
- Also
  - spreadsheet
  - bibtex/reference
  - ...
** DONE Task management - gtd principle
CLOSED: [2017-05-28 Sun 10:51]
#+begin_quote
#+CAPTION: (extracted from https://en.wikipedia.org/wiki/Getting_Things_Done)
#+NAME:   fig:gtd
#+ATTR_HTML: :width 75%
[[./assets/images/GTDcanonical.png]]
#+end_quote
** DONE Task management - An example
CLOSED: [2017-05-28 Sun 16:50]
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_todo.org" src org :eval never-export
** DONE Task management - Rendering
CLOSED: [2017-05-30 Tue 15:06]
#+begin_center
#+NAME:   fig:rendering_todo
#+ATTR_HTML: :width 50%
[[./assets/images/todo_rendering.png]]
#+end_center
** DONE Task management - Some important shortcuts
CLOSED: [2017-05-30 Tue 15:06]
- Summary = https://github.com/fniessen/refcard-org-mode
- C-c t = switch todo/done/... tags
- C-c C-d = define a deadline for the current task
- C-c C-s = schedule the current task
** DONE Dash
CLOSED: [2017-05-30 Tue 22:54]
- Allows you to have a global view of the project in progress
- Command = org-dashboard-display
- Shortcut = <f4> d
- DEMO
** DONE Agenda
CLOSED: [2017-05-30 Tue 22:54]
- Allows you to visualize your "calendar"
- Command = org-agenda
- Shortcut = <f12>
- DEMO

** DONE Capturing
CLOSED: [2017-05-30 Tue 22:56]
- Allows to interrupt briefly your workflow to add a reminder in your global todolist
- To extend this nice feature, see section (Org-mode > Capturing) in the configuration file (~/.emacs.d/main.org)
- DEMO
* Org-mode - Writing documents [100%]
** DONE The header
CLOSED: [2017-05-18 Thu 13:58]
- Summary = https://github.com/fniessen/refcard-org-mode
- For the meta-data
- "Minimum" header
#+begin_src org :eval never-export
#+TITLE: Reproducible with research with emacs (and org-mode)
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: slemaguer@coli.uni-saarland.de
#+DATE: 12 May 2017
#+end_src
- Can be adapted for the output (Example Latex)
#+begin_src org :eval never-export
# ##############################################################################################################################
#+STARTUP: beamer
#+STARTUP: oddeven
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [9pt]
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+BEAMER_THEME: progressbar
#+LATEX_CMD: xelatex
#+LaTeX_HEADER: \hypersetup{
#+LaTeX_HEADER:   colorlinks = true,
#+LaTeX_HEADER:   linkcolor = black
#+LaTeX_HEADER: }
#+latex_header: \usepackage{subfig}
#+LaTeX_HEADER: \usepackage{bibentry}
#+LaTeX_HEADER: \usepackage{multimedia}
#+LaTeX_HEADER: \makeatletter
#+LaTeX_HEADER: \let\@mycite\@cite
#+LaTeX_HEADER: \def\@cite#1#2{{\hypersetup{linkcolor=green!60!black}[{#1\if@tempswa , #2\fi}]}}
#+LaTeX_HEADER: \makeatother
# ##############################################################################################################################
#+end_src
** DONE The body - architecture
CLOSED: [2017-05-18 Thu 14:10]
- Summary = https://github.com/fniessen/refcard-org-mode
- Sections
#+begin_src org :eval never-export
,* Header 1
,** Header 2
,*** Header 3
...
#+end_src
- Lists
#+begin_src org :eval never-export
- list 1
  - list 11
    + list111 with other bullets
    + list112 with other bullets
  - list 12
    1. list121 as enumerate
    2. list122 as enumarate
#+end_src
** DONE The body - content formatting
CLOSED: [2017-05-28 Sun 19:55]
- Summary = https://github.com/fniessen/refcard-org-mode
- Text formatting
#+begin_src org :eval never-export
/Emphasize/ (italics), *strongly* (bold), and */very strongly/* (bold italics).
#+end_src
- Paragraph separated by an empty line
- Horizontal rule is done using *5* dashes
- Links are in brackets
- Mathematical formula exactly like latex :
#+begin_src org :eval never-export
\begin{equation}
f_1(x) = \frac{1}{N} \sum_{r=1}^R log(x(r)^2)
\end{equation}
#+end_src
\begin{equation}
f_1(x) = \frac{1}{N} \sum_{r=1}^R log(x(r)^2)
\end{equation}

** DONE The body - table
CLOSED: [2017-05-28 Sun 17:48]
- Command = org-table-create
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_table.org" src org :eval never-export
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_table.org"
- Row separator = new line
- Column separator = "|"
- horizontal line = "|---+---|"
  - "|" = first/end column indicator
  - "-" = filler
  - "+" = column separator
** DONE The body - images
CLOSED: [2017-05-28 Sun 17:53]
#+begin_src org
,#+CAPTION: (extracted from https://en.wikipedia.org/wiki/Getting_Things_Done)
,#+NAME:   fig:gtd
,#+ATTR_HTML: :width 75%
,#+ATTR_LATEX: :width 0.75\linewidth
[[./assets/images/GTDcanonical.png]]
#+end_src
- do you remember this slide "Task management - gtd principle" ?
** DONE The body - interesting shortcuts
CLOSED: [2017-05-29 Mon 21:40]
- More complete information at = http://orgmode.org/orgcard.pdf
- In the text
  - C-c C-l create a link
- Header
  - C-<return> create an item at the same level of the current header (*no list*)
  - M-<left/right-arrow> 	Change bullet and numbering type
- List
  - M-<return> create an item at the same level in the list or header
  - Shift-<left/right-arrow> 	Change bullet and numbering type
- In a table
  - <pipe><hypen> followed by tab = create a table or complete the row
** DONE Exporting
CLOSED: [2017-05-30 Tue 19:05]
- Different kind of exporter (HTML, reveal, LaTeX, Beamer, Markdown, ...)
- Command to export = C-c C-e then a dedicated buffer opens:
- DEMO
** DONE Having fun for 5min
CLOSED: [2017-05-28 Sun 17:54]
- Let's try to write a small document
- Try to use everything we wrote before (a table, an image, ...)
- Export it in latex and/or HTML
* Org-mode - Literate programming [100%]
** DONE What is literate programming
CLOSED: [2017-05-28 Sun 17:54]
- Introduced by D. Knuth (FIXME:  ref)
#+begin_quote
Literate programming is a programming paradigm introduced by Donald
Knuth in which a program is given as an explanation of the program
logic in a natural language, such as English, interspersed with
snippets of macros and traditional source code, from which a
compilable source code can be generated.
#+end_quote
** DONE How to handle it with org-mode
CLOSED: [2017-05-29 Mon 21:50]
- *org-babel* is handling that
- Insert code using the following syntax
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_src.org" src org :eval never-export
- Including a script file using the following syntax
#+begin_src org :eval never-export
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_src.org" src org :eval never-export
#+end_src
- Rendering results:
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_src.org"
** DONE How to handle it with org-mode - actually working
CLOSED: [2017-05-29 Mon 21:53]
- *org-babel* is handling that
- Insert code using the following syntax
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_src_results.org" src org :eval never-export
- Including a script file using the following syntax
#+begin_src org :eval never-export
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_src.org" src org :eval never-export
#+end_src
- Rendering results:
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_src_results.org"
** DONE Dealing with results/source/...
CLOSED: [2017-05-29 Mon 22:36]
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_src_full.org" src org :eval never-export
** DONE Deal - output
CLOSED: [2017-05-29 Mon 22:58]
#+include: "~/work/courses/current/teaching/reproducible-research/assets/files/example_src_full.org"

** DONE Having fun for 5min
CLOSED: [2017-05-29 Mon 21:55]
- Update the previous documents to add
  - A source for which you just want to have the *source* visible in the exported document
  - A source for which you just want to have the *result* visible in the exported document
  - A source for which you want to have both the *source* and the *result* visible in the exported document
* Org-mode/emacs as a "pandoc" equivalent [100%]
** DONE But...why ?!
CLOSED: [2017-05-29 Mon 16:12]
- Problem: how to deal with massive data/time consuming experiments?
- Solution:
  1. Design the experiments using workflow management tools (make, gradle, ...)
  2. In the last *experimental stage* Format the results in a certain way (csv, ....)
  3. Design the org document assuming these results are available
  4. Call emacs to render the org-mode
- Preliminary informations:
  - The default configuration is *not* used !
  - An emacs configuration is embedded in the project
  - Gradle is used to control the process
  - Scripts are based on the one proposed in https://github.com/nhoffman/org-export
** DONE A project example - architecture
CLOSED: [2017-05-29 Mon 16:12]
- repository = https://github.com/seblemaguer/example-gradle-emacs
#+begin_example
.
âââ build.gradle
âââ gradle
âââ gradlew
âââ gradlew.bat
âââ scripts
âÂ Â  âââ org-export-beamer.el
âÂ Â  âââ org-export-cli.el
âÂ Â  âââ org-export-html.el
âÂ Â  âââ org-export-latex.el
âÂ Â  âââ org-export-reveal.el
âââ settings.gradle
âââ src
    âââ assets
    âââ biblio.bib
    âââ paper.org
#+end_example
- We provide....
  - Gradle configuration (build.gradle, settings.gradle gradle*)
  - Emacs exporter scripts (scripts/*.el)
- We need...
  - the source of the document (src/paper.org)
  - the optional bibliography (src/biblio.bib)
  - the assets which *are downloaded* into src/assets
- The output will be put in the build directory
** DONE A project example - org part
CLOSED: [2017-05-31 Wed 00:17]
- see src/paper.org
- Nothing different than before except.....
  - we assume the presence of the assets
** DONE A project example - gradle part
CLOSED: [2017-05-31 Wed 00:40]
- That is where the process is put into place
- First retrieve the assets
#+begin_src groovy
  task downloadAssets(type: Download) {
      src "http://www.coli.uni-saarland.de/~slemaguer/attachments/example_gradle_emacs/values.csv"
      dest "src/assets/values.csv"
      overwrite false
  }
#+end_src
- Then process the assets
#+begin_src groovy
task processAssetsLatex(type: Copy) {
    from fileTree('src').include('assets/**')
    into "$buildDir/${rootProject.name}/latex"
}
#+end_src
- Finally generate the document (latex in this example)
#+begin_src groovy
task org2latex(type: Exec, dependsOn: "processAssetsLatex") {
    def orgFile = file("src/slides.org")
    def pdfFile = file("$buildDir/${rootProject.name}/latex/index.pdf")
    inputs.files orgFile, processAssetsLatex
    outputs.files pdfFile

    commandLine "emacs-bin", "-q", "--no-site-file", "--evaluate", "--script", "scripts/org-export-beamer.el", "--infile", orgFile, "--outfile", pdfFile
}
#+end_src
** DONE A project example - to run
CLOSED: [2017-05-29 Mon 16:17]
- To run just run the following command:
#+begin_src sh
./gradlew b
#+end_src
- Your turn:
  - create a project based on the current one
  - Try to generate some documentation
* Conclusion [100%]
** DONE Summary
CLOSED: [2017-05-18 Thu 14:42]
- (Quick) Introduction to emacs
  - Main concepts: buffer, files, windows, commands, ...
  - Main commands: M-x, C-h m, C-h k, ...
  - Package management
  - A baseline configuration \Rightarrow you can modify it :D
- (Quick) Introduction to org-mode
  - Todo lists + Agenda management
  - Writing documents using org-mode
  - Exporting documents using org-mode
- Reproducible research
  - Litterate programming with org-mode
  - Invocating org-mode to generate documentation from a project
** DONE How to go further [some interesting links]
CLOSED: [2017-05-28 Sun 10:32]
- Emacs - official
  - The official website: https://www.gnu.org/software/emacs/
  - The official manual: https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html
  - An introduction to elisp: https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html
  - The official elisp manual: https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html
  - The official emacs FAQ: https://www.gnu.org/software/emacs/manual/html_node/efaq/index.html
- Org mode - official
  - The official website: [[http://orgmode.org/]]
  - The official manual: [[http://orgmode.org/manual/]]
  - A nice cookbook: http://ehneilsen.net/notebook/orgExamples/org-examples.html
- Some other interesting places
  - emacswiki: https://www.emacswiki.org
  - stackexchange: https://emacs.stackexchange.com
  - reddit: https://www.reddit.com/r/emacs/
- Channels (IRC, on irc.freenode.net):
  - #emacs
  - #emacs-beginners
  - #org-mode
- *Some advices*
  - Learning is trying and then using (especially for the shortcuts)
  - Think about the ratio saving up now/saving up later
* COMMENT some extra configuration
