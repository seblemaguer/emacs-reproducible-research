#+TITLE: Reproducible with research with emacs (and org-mode)
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: slemaguer@coli.uni-saarland.de
#+DATE: 12 May 2017
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:2 num:t toc:nil  \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
# #+SETUPFILE: ~/environment/src/non-install-utils/org-html-themes/setup/theme-bigblow.setup

# ##############################################################################################################################
# #+REVEAL_MATHJAX_URL: http://localhost:8000/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
# ##############################################################################################################################

# ##############################################################################################################################
#+REVEAL_THEME: w3c
#+REVEAL_TRANS: none
#+REVEAL_INIT_SCRIPT: width: "100%",
#+REVEAL_INIT_SCRIPT: height: "100%",
#+REVEAL_INIT_SCRIPT: margin: 0,
#+REVEAL_INIT_SCRIPT: minScale: 1,
#+REVEAL_INIT_SCRIPT: maxScale: 1,
#+REVEAL_PLUGINS: (markdown highlight)
#+OPTIONS: reveal_progress:t, reveal_history:nil, reveal_control:nil, reveal_center:nil
# ##############################################################################################################################

# ##############################################################################################################################
#+STARTUP: beamer
#+STARTUP: oddeven
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [9pt]
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+BEAMER_THEME: progressbar
#+LATEX_CMD: xelatex
#+LaTeX_HEADER: \hypersetup{
#+LaTeX_HEADER:   colorlinks = true,
#+LaTeX_HEADER:   linkcolor = black
#+LaTeX_HEADER: }
#+latex_header: \usepackage{subfig}
#+LaTeX_HEADER: \usepackage{bibentry}
#+LaTeX_HEADER: \usepackage{multimedia}
#+LaTeX_HEADER: \makeatletter
#+LaTeX_HEADER: \let\@mycite\@cite
#+LaTeX_HEADER: \def\@cite#1#2{{\hypersetup{linkcolor=green!60!black}[{#1\if@tempswa , #2\fi}]}}
#+LaTeX_HEADER: \makeatother
# ##############################################################################################################################

# ##############################################################################################################################
# Local Variables:
# ispell-check-comments: exclusive
# ispell-local-dictionary: "american"
# End:
# ##############################################################################################################################


* Introduction
** Introduction
#+begin_quote
*What do I mean by reproducible research*

- *Being able to reproduce experiments*
- Identify the state of the experiments (what has been done/what remains to be done)
- Understand the process which leads to the current state
#+end_quote

#+begin_quote
*Why using emacs ?*
- Because we have all the tools to help you in this editor
#+end_quote

#+begin_quote
*Some pre-requisite*
- Linux ubuntu 16.04 / bash
#+end_quote
* Emacs basics [40%]
** DONE General informations
CLOSED: [2017-05-16 Tue 21:24]
- Global informations
  - EMACS = Editor MACroS
  - Development started during the 70s
  - Multiple variation *GNU Emacs*, XEmacs, AquaMacs...
  - Compatible Unix-Like (*Linux*, macos, ...) + windows
- Global key concepts
  - 3 modifier keys = CTRL, MAJ, META
  - META = alt on PC,  command on MAC
- Commands [FIXME: minor explanation]
** TODO Graphic overview
[FIXME: adding a screenshot]
** TODO Graphic overview with a legend
[FIXME: adding a screenshot]
** TODO Major mode / minor mode
** DONE Emacs configuration
CLOSED: [2017-05-17 Wed 13:31]
- Global
  - Configuration language = *elisp* (emacs lisp)
  - Programming language \Rightarrow a little bit of investment....
  - ....but powerful
- Entry point = ~/.emacs or ~/.emacs.d/init.el
  - You can put everything there...
  - Or import other files
  - *Not the focus of this course*: a baseline configuration will be provided later
* Hands-on emacs [75%]
** DONE Environment preparation
CLOSED: [2017-05-17 Wed 12:50]
- Pre-configuration
  - Package installation (ubuntu)
#+begin_src emacs-lisp
sudo apt-get install [FIXME: package]
#+end_src
  - Copy the following the following profile into ~/.profile : https://raw.githubusercontent.com/seblemaguer/emacs-reproducible-research/master/assets/configuration/profile
  - For future use Adapt your bashrc by adding
#+begin_src sh
# Include profile variables
source ~/.profile
#+end_src
  - For the current session, write in the current terminal
#+begin_src sh
source ~/.profile
echo $PATH # Check that the path is correct
#+end_src
** DONE Compilation/installation/running
CLOSED: [2017-05-17 Wed 12:51]
  - Compilation/installation
    1. Retrieve the installation shell script: [[https://raw.githubusercontent.com/seblemaguer/emacs-reproducible-research/master/assets/scripts/emacs_install.sh]]
    2. Execute the shell script with the following syntax
#+begin_src bash
bash emacs_install.sh -j 2 $HOME/environment/local
#+end_src
- Running
#+begin_src sh
emacs
#+end_src
** TODO The most important keys in the world ! (or maybe not but still)
- M-x = starting a command
- C-h, C-m, C-k, C-f = documentation shortcut
- C-x f, C-x s, C-x w = open file/save buffer
- refcard = https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf
** DONE Having fun for 5min :D
CLOSED: [2017-05-16 Tue 22:11]
*** Try to do this
- Open some source code file (java, python, c, ...)
- Open some tex file
- Query the documentation, ...
*** Some feedback ?
- What is easy ?
- What is difficult ?
- Do you have an idea of how to improve
*** Some questions ?
- Don't hesitate to be exhaustive or say if you don't understand something
* Hands-on configured emacs [40%]
** DONE Package management
CLOSED: [2017-05-17 Wed 13:06]
- Emacs has a package management system
- *use-package* = helper to install and *configure* a package
  - URL = https://github.com/jwiegley/use-package/
  - A baseline example
#+begin_src emacs-lisp
  (use-package spaceline-all-the-icons ;; The package to install
    :ensure t ;; Force the installation
    :after spaceline ;; Initialisation after the given package

    ;; Preconfiguration, *before* the package is loaded
    :init

    (setq spaceline-all-the-icons-separator-type 'wave
          spaceline-separator-dir-left '(left . left)
          spaceline-separator-dir-right '(right . right)
          spaceline-minor-modes-separator " ")

    ;; Configuration, *after* the package is loaded
    :config

    (spaceline-all-the-icons-theme)
    (require 'spaceline-config)
    (spaceline-helm-mode)
    (use-package info+
      :ensure t
      :init
      (spaceline-info-mode))

    (use-package fancy-battery
      :ensure t
      :init
      (add-hook 'after-init-hook #'fancy-battery-mode)
      (display-battery-mode -1))

    (spaceline-all-the-icons--setup-paradox)
    )
#+end_src
- To list available packages use the command: =list-packages=
** TODO Install a minimal configuration
- Retrieve the following file: https://raw.githubusercontent.com/seblemaguer/emacs-reproducible-research/master/assets/configuration/init.el
- Copy it into =~/.emacs.d/init.el=
- Open emacs, it should look like that:
[FIXME: screenshot]
** TODO Some main functionalities
- Buffer management
  - Using C-x C-b to open the ibuffer list
- File/directory management
  - Using C-x C-r to list the recently opened files
  - Using C-x C-d to list directories
- VC/Project management (see the next section)
  - Main shortcut = <f4>
- Agenda management (see the section about org-mode)
  - Main shortcut = <f12>
** DONE Having fun for 5min
CLOSED: [2017-05-16 Tue 22:11]
- Try to open some source code file (java, python, c, ...)
- Try to open some tex file
- Try to query the documentation, ...
- *Try to spot the differences*
** TODO Bonus: configure a server/client architecture
- Why? because it's faster :)
- How to:
  1. Retrieve the following shell script [FIXME: url]
  2. Execute the shell script with the following syntax
- Try to run the emacs command
* Project/scm [40%]
** DONE Project management
CLOSED: [2017-05-18 Thu 13:39]
- Multiple tools available but we focus on *projectile*
- Repository = https://github.com/bbatsov/projectile
- Idea:
#+begin_quote
 The concept of a project is pretty basic - just a folder containing
 special file. Currently git, mercurial, darcs and bazaar repos are
 considered projects by default. So are lein, maven, sbt, scons, rebar
 and bundler projects.
#+end_quote
- Prefix : C-x p (see configuration file)
- Some useful commands
  - C-c p f = open file *in the project*
  - C-c p h = open helm to manipulate projectile
** TODO Projectile - example
Adding video
** DONE Git
CLOSED: [2017-05-18 Thu 13:50]
- Main tools is *magit*
  - Repository = https://github.com/magit/magit
  - Lots of avantages:
    - All the functionality
    - Easy to use
    - Interface with github (magithub = https://github.com/vermiculus/magithub/)
  - Entry command = =magit-status=
- History of a file
  - Tool = magit-timemachine
  - Repository = https://github.com/pidu/git-timemachine
  - Command = =git-timemachine=
** TODO Magit - example
Adding video
** TODO Git-timemachine - example
Adding video
* Org-mode - Introduction [25%]
** DONE General informations
CLOSED: [2017-05-19 Fri 16:10]
#+begin_quote
Org mode is for keeping notes, maintaining TODO lists, planning
projects, and authoring documents with a fast and effective plain-text
system.
#+end_quote
- Also
  - spreadsheet
  - bibtex/reference
  - ...
** TODO Task management - gtd principle
** TODO Agenda/dash/...
** TODO Capturing
* Org-mode - writing documents [28%]
** DONE The header
CLOSED: [2017-05-18 Thu 13:58]
- Summary = https://github.com/fniessen/refcard-org-mode
- For the meta-data
- "Minimum" header
#+begin_src org :eval never-export
#+TITLE: Reproducible with research with emacs (and org-mode)
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: slemaguer@coli.uni-saarland.de
#+DATE: 12 May 2017
#+end_src
- Can be adapted for the output (Example Latex)
#+begin_src org :eval never-export
# ##############################################################################################################################
#+STARTUP: beamer
#+STARTUP: oddeven
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [9pt]
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+BEAMER_THEME: progressbar
#+LATEX_CMD: xelatex
#+LaTeX_HEADER: \hypersetup{
#+LaTeX_HEADER:   colorlinks = true,
#+LaTeX_HEADER:   linkcolor = black
#+LaTeX_HEADER: }
#+latex_header: \usepackage{subfig}
#+LaTeX_HEADER: \usepackage{bibentry}
#+LaTeX_HEADER: \usepackage{multimedia}
#+LaTeX_HEADER: \makeatletter
#+LaTeX_HEADER: \let\@mycite\@cite
#+LaTeX_HEADER: \def\@cite#1#2{{\hypersetup{linkcolor=green!60!black}[{#1\if@tempswa , #2\fi}]}}
#+LaTeX_HEADER: \makeatother
# ##############################################################################################################################
#+end_src
** DONE The body - architecture
CLOSED: [2017-05-18 Thu 14:10]
- Summary = https://github.com/fniessen/refcard-org-mode
- Sections
#+begin_src org :eval never-export
,* Header 1
,** Header 2
,*** Header 3
...
#+end_src
- Lists
#+begin_src org :eval never-export
- list 1
  - list 11
    + list111 with other bullets
    + list112 with other bullets
  - list 12
    1. list121 as enumerate
    2. list122 as enumarate
#+end_src
** TODO The body - content formatting
- Summary = https://github.com/fniessen/refcard-org-mode
- Text formatting
#+begin_src org :eval never-export
/Emphasize/ (italics), *strongly* (bold), and */very strongly/* (bold italics).
#+end_src
- Paragraph separated by an empty line
- Horizontal rule is done using *5* dashes
- Links are in brackets
- Mathematical formula exactly like latex
** TODO The body - table
** TODO Source code formatting
** TODO Exporting
- Different kind of exporter (HTML, reveal, LaTeX, Beamer, Markdown, ...)
- Command to export = C-c C-e then a dedicated buffer opens:
** TODO Having fun for 5min
- Let's try to write a small document
- Try to use everything we wrote before (a table, an image, ...)
- Export it in latex and/or HTML
* Org-mode - literate programming [0%]
** TODO What is literate programming
- Introduced by D. Knuth [FIXME: ref]
#+begin_quote
Literate programming is a programming paradigm introduced by Donald
Knuth in which a program is given as an explanation of the program
logic in a natural language, such as English, interspersed with
snippets of macros and traditional source code, from which a
compilable source code can be generated.
#+end_quote
** TODO How to handle it with org-mode
** TODO Dealing with results/source/...
* Org-mode/emacs as a "pandoc" equivalent [0%]
** But...why ?!
- Problem: how to deal with massive data/time consuming experiments?
- Solution:
  1. Design the experiments using workflow management tools (make, gradle, ...)
  2. In the last *experimental stage* Format the results in a certain way (csv, ....)
  3. Design the org document assuming these results are available
  4. Call emacs to render the org-mode
** TODO Preliminary configuration
** TODO A project example - architecture
** TODO A project example - org part
** TODO A project example - gradle part
** TODO A project example - to run
* Conclusion [50%]
** DONE Summary
CLOSED: [2017-05-18 Thu 14:42]
- (Quick) Introduction to emacs
  - Main concepts: buffer, files, windows, commands, ...
  - Main commands: M-x, C-h m, C-h k, ...
  - Package management
  - A baseline configuration \Rightarrow you can modify it :D
- (Quick) Introduction to org-mode
  - Todo lists + Agenda management
  - Writing documents using org-mode
  - Exporting documents using org-mode
- Reproducible research
  - Litterate programming with org-mode
  - Invocating org-mode to generate documentation from a project
** TODO How to go further
[FIXME: adding link]
* COMMENT some extra configuration
