#+TITLE: Emacs main configuration file
#+AUTHOR: SÃ©bastien Le Maguer
#+EMAIL: slemaguer@coli.uni-saarland.de
#+DATE: 19 May 2017
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+SETUPFILE: ~/environment/src/non-install-utils/org-html-themes/setup/theme-readtheorg.setup

* Introduction
This file contains the main configuration part for the session on
"emacs & reproducible research". Technically this file is downloaded
by the [[https://github.com/seblemaguer/emacs-reproducible-research/blob/master/assets/configuration/init.el][init.el]] file.
* Global part
** Startup
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq find-file-suppress-same-file-warnings t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

(defun custom-startup ()
  (org-agenda-list 1)
  (switch-to-buffer "*Org Agenda*"))
(add-hook 'window-setup-hook 'custom-startup)
#+end_src
** Encoding
#+begin_src emacs-lisp
(setq system-time-locale "en_US.utf8")  ; "C"?
(add-to-list 'file-coding-system-alist '("\\.owl\\'" utf-8 . utf-8))
(prefer-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
#+end_src
** Undo(ing)
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))
#+end_src
** Recentf
#+begin_src emacs-lisp
  (use-package recentf
    :config
    (setq recentf-max-menu-items 100)
    (recentf-mode 1)

    ;; Exclude file from recentf
    (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/.*" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/\\.ido\\.last" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/\\.recentf" (getenv "HOME")))
    (add-to-list 'recentf-exclude (format "%s/Calendars/.*" (getenv "HOME")))
    (add-to-list 'recentf-exclude ".*todo.org"))
#+end_src
** Backing up
#+begin_src emacs-lisp

(defvar --backup-directory (concat user-emacs-directory "backups"))
(if (not (file-exists-p --backup-directory))
    (make-directory --backup-directory t))
(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t               ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
      )

(define-minor-mode sensitive-mode
  "For sensitive files like password lists.
  It disables backup creation and auto saving.

  With no argument, this command toggles the mode.
  Non-null prefix argument turns on the mode.
  Null prefix argument turns off the mode."
  ;; The initial value.
  nil
  ;; The indicator for the mode line.
  " Sensitive"
  ;; The minor mode bindings.
  nil
  (if (symbol-value sensitive-mode)
      (progn
	;; disable backups
	(set (make-local-variable 'backup-inhibited) t)
	;; disable auto-save
	(if auto-save-default
	    (auto-save-mode -1))) ;resort to default value of backup-inhibited
    (kill-local-variable 'backup-inhibited) ;resort to default auto save setting
    (if auto-save-default
	(auto-save-mode 1))))
(add-to-list 'auto-mode-alist '("\\.gpg$" . sensitive-mode))

;; Starting backup
;; (backups-mode-start)
#+end_src
** Copy/paste
#+begin_src emacs-lisp
(setq mouse-drag-copy-region nil)
(setq x-select-enable-primary nil)
(setq x-select-enable-clipboard t)
(setq select-active-regions t)
#+end_src
** Spelling
#+begin_src emacs-lisp
(setq-default ispell-program-name "aspell")
#+end_src
** Minibuffer
#+begin_src emacs-lisp

(setq read-file-name-completion-ignore-case t
      completion-ignore-case t
      resize-mini-windows t)
(file-name-shadow-mode 1)
(icomplete-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
#+end_src
** Documentation
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>") 'info)
  (global-set-key (kbd "<S-f1>") 'man-follow)
  (global-set-key (kbd "<C-f1>") 'info-lookup-symbol)
#+end_src
** Keys
#+begin_src emacs-lisp
(use-package hydra :ensure t)
#+end_src
* Buffer
** Ibuffer
*** Filter
#+begin_src emacs-lisp
  (use-package ibuffer-projectile :ensure t)
  (defun my-own-ibuffer-hook ()
    ""
    (interactive)
    (setq ibuffer-saved-filter-groups
          (list
           (cons "default"
                 (append
                  '(("Emacs"
                     (or
                      (name . "^[*]scratch[*]$")
                      (name . "^[*]Messages[*]$")))

                    ("Term"
                     (or
                      (mode . comint-mode)
                      (mode . term-mode)))

                    ("Calendar"
                     (or
                      (name . "^[*]?[Cc]alendar.*$")
                      (name . "^diary$")
                      (mode . cfw:calendar-mode)
                      (mode . muse-mode)))

                    ("Todos"
                     (filename . "/todo.org"))

                    ("Emms"
                     (or
                      (mode . emms-mode)
                      (mode . emms-browser-mode)
                      (mode . emms-playlist-mode)))

                    ("RSS/Podcast"
                     (or
                      (name . "rss.org")
                      (name . "^[*]?[Ee]lfeed.*$")
                      (derived-mode . elfeed-search-mode)
                      (derived-mode . elfeed-show-mode)))

                    ("Helm"
                     (mode . helm-major-mode))

                    ("Help"
                     (or
                      (derived-mode . apropos-mode)
                      (derived-mode . help-mode)
                      (derived-mode . Info-mode)))

                    ("Mail"
                     (or
                      (mode . message-mode)
                      (mode . bbdb-mode)
                      (mode . mail-mode)
                      (mode . mu4e-view-mode)
                      (mode . mu4e-headers-mode)
                      (mode . mu4e-compose-mode)
                      (name . "^\.bbdb$")
                      (name . "^\.newsrc-dribble"))))

                  (ibuffer-tramp-generate-filter-groups-by-tramp-connection)
                  (ibuffer-projectile-generate-filter-groups)

                  '(("Dired" (mode . dired-mode))

                    ("Shell"
                     (or
                      (mode . sh-mode)))

                    ("Editing"
                     (or
                      (mode . tex-mode)
                      (mode . latex-mode)
                      (mode . bibtex-mode)
                      (mode . text-mode)))

                    ("Mathematics/Statistics"
                     (or
                      (mode . matlab-mode)
                      (name . "^[*]MATLAB[*]$")
                      (mode . ess-mode)
                      (mode . iESS)))


                    ("Configuration"
                     (or
                      (derived-mode . conf-mode)))

                    ("Web"
                     (or
                      (mode . php-mode)
                      (mode . css-mode)
                      (mode . html-mode)
                      (mode . js2-mode)
                      (mode . scss-mode)
                      (mode . web-mode)))

                    ("Programming"
                     (or
                      (mode . emacs-lisp-mode)
                      (mode . c-mode)
                      (mode . cperl-mode)
                      (mode . python-mode)
                      (mode . c++-mode)
                      (mode . java-mode)
                      (mode . jde-mode)))

                    ("Compiling"
                     (or
                      (mode . groovy-mode)
                      (derived-mode . makefile-mode)))

                    ("Data"
                     (or
                      (mode . csv-mode)
                      (mode . json-mode)
                      (mode . nxml-mode)
                      (mode . ledger-mode)
                      ))

                    ("Org"
                     (or
                      (mode . org-mode)))

                    ("Temp"
                     (or
                      (name ."^[*].*[*]$")))
                    ))))))

#+end_src
*** Ibuffer configuration
#+begin_src emacs-lisp
  (use-package ibuffer
    :config

    ;; Some ibuffer subpackage
    (use-package ibuffer-git :ensure t)
    (use-package ibuffer-tramp :ensure t)

    ;; Readable size column
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.3fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 1000) (format "%7.3fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    ;; Last modification time column
    (defun get-modification-time-buffer(b)
      "Retrieve the savetime of the given buffer"
      (if (buffer-file-name b)
          (format-time-string "%Y-%m-%d %H:%M:%S"
                              (nth 5 (file-attributes (buffer-file-name b))))
        ""))
    (define-ibuffer-column last-modification
      (:name "Last modification time" )
      (get-modification-time-buffer buffer))

    ;; Format line
    (setq ibuffer-formats
          '((mark modified read-only
                  (name 30 30 :left :elide) " "
                  (size-h 9 -1 :right) " "
                  (mode 20 20 :left :elide) " "
                  (git-status 8 8 :left)" "
                  (last-modification 30 30 :left :elide)  " "
                  filename-and-process)))
    (defadvice ibuffer-update (around ibuffer-preserve-prev-header activate)
      "Preserve line-header used before Ibuffer if it doesn't set one"
      (let ((prev-line-header header-line-format))
        ad-do-it
        (unless header-line-format
          (setq header-line-format prev-line-header)))
      )

    ;; Marking buffer
    (setq ibuffer-marked-char ?â)

    ;;  Sorting
    (setq ibuffer-default-sorting-mode 'major-mode)

    ;; Ignore empty groups
    (setq ibuffer-show-empty-filter-groups nil)

    ;; Auto revert
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (my-own-ibuffer-hook)
                (ibuffer-switch-to-saved-filter-groups "default")
                (ibuffer-update nil t)))

    ;; Always put the cursor to the origin buffer
    (defun ibuffer-jump-to-last-buffer ()
      (ibuffer-jump-to-buffer (buffer-name (cadr (buffer-list)))))
    (add-hook 'ibuffer-hook #'ibuffer-jump-to-last-buffer)

    ;; Some user functions

    ;; Some keyboards
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (use-package hydra
      :config
      (defhydra hydra-ibuffer-main (:color pink :hint nil)
        "
     ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
    -^----------^-+-^----^--------+-^-------^--------+-^----^-------
      _k_:    Ê   | _m_: mark     | _D_: delete      | _g_: refresh
     _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
      _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
    -^----------^-+-^----^--------+-^-------^--------+-^----^-------
    "
        ("j" ibuffer-forward-line)
        ("RET" ibuffer-visit-buffer :color blue)
        ("k" ibuffer-backward-line)

        ("m" ibuffer-mark-forward)
        ("u" ibuffer-unmark-forward)
        ("*" hydra-ibuffer-mark/body :color blue)

        ("D" ibuffer-do-delete)
        ("S" ibuffer-do-save)
        ("a" hydra-ibuffer-action/body :color blue)

        ("g" ibuffer-update)
        ("s" hydra-ibuffer-sort/body :color blue)
        ("/" hydra-ibuffer-filter/body :color blue)

        ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
        ("q" ibuffer-quit "quit ibuffer" :color blue)
        ("." nil "toggle hydra" :color blue))

      (defhydra hydra-ibuffer-mark (:color teal :columns 5
                                           :after-exit (hydra-ibuffer-main/body))
        "Mark"
        ("*" ibuffer-unmark-all "unmark all")
        ("M" ibuffer-mark-by-mode "mode")
        ("m" ibuffer-mark-modified-buffers "modified")
        ("u" ibuffer-mark-unsaved-buffers "unsaved")
        ("s" ibuffer-mark-special-buffers "special")
        ("r" ibuffer-mark-read-only-buffers "read-only")
        ("/" ibuffer-mark-dired-buffers "dired")
        ("e" ibuffer-mark-dissociated-buffers "dissociated")
        ("h" ibuffer-mark-help-buffers "help")
        ("z" ibuffer-mark-compressed-file-buffers "compressed")
        ("b" hydra-ibuffer-main/body "back" :color blue))

      (defhydra hydra-ibuffer-action (:color teal :columns 4
                                             :after-exit
                                             (if (eq major-mode 'ibuffer-mode)
                                                 (hydra-ibuffer-main/body)))
        "Action"
        ("A" ibuffer-do-view "view")
        ("E" ibuffer-do-eval "eval")
        ("F" ibuffer-do-shell-command-file "shell-command-file")
        ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
        ("H" ibuffer-do-view-other-frame "view-other-frame")
        ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
        ("M" ibuffer-do-toggle-modified "toggle-modified")
        ("O" ibuffer-do-occur "occur")
        ("P" ibuffer-do-print "print")
        ("Q" ibuffer-do-query-replace "query-replace")
        ("R" ibuffer-do-rename-uniquely "rename-uniquely")
        ("T" ibuffer-do-toggle-read-only "toggle-read-only")
        ("U" ibuffer-do-replace-regexp "replace-regexp")
        ("V" ibuffer-do-revert "revert")
        ("W" ibuffer-do-view-and-eval "view-and-eval")
        ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
        ("b" nil "back"))

      (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
        "Sort"
        ("i" ibuffer-invert-sorting "invert")
        ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
        ("v" ibuffer-do-sort-by-recency "recently used")
        ("s" ibuffer-do-sort-by-size "size")
        ("f" ibuffer-do-sort-by-filename/process "filename")
        ("m" ibuffer-do-sort-by-major-mode "mode")
        ("b" hydra-ibuffer-main/body "back" :color blue))

      (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
        "Filter"
        ("m" ibuffer-filter-by-used-mode "mode")
        ("M" ibuffer-filter-by-derived-mode "derived mode")
        ("n" ibuffer-filter-by-name "name")
        ("c" ibuffer-filter-by-content "content")
        ("e" ibuffer-filter-by-predicate "predicate")
        ("f" ibuffer-filter-by-filename "filename")
        (">" ibuffer-filter-by-size-gt "size")
        ("<" ibuffer-filter-by-size-lt "size")
        ("/" ibuffer-filter-disable "disable")
        ("b" hydra-ibuffer-main/body "back" :color blue))

      (define-key ibuffer-mode-map "." 'hydra-ibuffer-main/body))
    )
#+end_src

** Large file
#+begin_src emacs-lisp
  (use-package vlf :ensure t)
#+end_src
** Hooks
#+begin_src emacs-lisp
  ;; Delete trailing-whitespace
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** Unify the buffer name style
#+begin_src emacs-lisp
  (eval-after-load "uniquify"
    '(progn
       (setq uniquify-buffer-name-style 'forward)))
#+end_src
* File / Directory
** Dired
#+begin_src emacs-lisp
(use-package dired
  :config

  ;; Subpackage
  (use-package dired-dups :ensure t)
  (use-package dired-efap :ensure t)
  (use-package dired-explorer :ensure t)
  (use-package dired-hacks-utils :ensure t)
  (use-package dired-narrow :ensure t)
  (use-package dired-rainbow :ensure t)
  (use-package dired-ranger :ensure t)
  (use-package dired-subtree :ensure t)
  (use-package dired-toggle-sudo :ensure t)
  (use-package diredful :ensure t)
  (use-package dired-single :ensure t)
  (use-package dired+ :ensure t)
  (use-package peep-dired :ensure t)

  ;; ls adaptation
  (when (eq system-type 'darwin)
    (require 'ls-lisp)
    (setq ls-lisp-use-insert-directory-program t)
    (setq insert-directory-program "/usr/local/bin/gls"))
  (setq dired-listing-switches "--group-directories-first -alh")

  ;; Ignoring details by default (can be reactivate after)
  (if (boundp 'ls-lisp-ignore-case)
      (setq ls-lisp-ignore-case t))
  (if (boundp 'ls-lisp-dirs-first)
      (setq ls-lisp-dirs-first t))
  (if (boundp 'ls-lisp-format-time-list)
      (setq ls-lisp-format-time-list
	    '("%Y-%m-%d %H:%M"
	      "%Y-%m-%d %H:%M")))
  (if (boundp 'ls-lisp-use-localized-time-format)
      (setq ls-lisp-use-localized-time-format t))

  (add-hook 'dired-load-hook
	    (lambda ()
	      (load "dired-column-widths.el")))
  (setq dired-details-hidden-string "[...] ")

  ;; FIXME: what is that:
  (setq dired-dwim-target t
	dired-recursive-deletes 'top
	dired-recursive-copies 'always)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Omitting
  (setq-default dired-omit-files "^\\.[^.]+")
  (setq-default dired-omit-mode t)

  ;; Compression mode
  (setq auto-compression-mode t)

  ;; Global keys
  (global-set-key (kbd "C-x C-d") 'dired))
#+end_src
** Diff
#+begin_src emacs-lisp
(setq diff-switches "-u")
(autoload 'diff-mode "diff-mode" "Diff major mode" t)
(setq ediff-auto-refine-limit (* 2 14000))
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function (lambda (&optional arg)
                    (if (> (frame-width) 160)
                    (split-window-horizontally arg)
		    (split-window-vertically arg))))
#+end_src
** Image/compressed files
#+begin_src emacs-lisp
(use-package image+
  :ensure t
  :config
  (use-package image-dired+ :ensure t)
  (setq auto-image-file-mode t))
#+end_src
** Tramp
#+begin_src emacs-lisp
(use-package tramp
  :config
  ;; Global configuration
  (setq tramp-default-method "ssh")
  (setq password-cache-expiry 60)
  (setq tramp-auto-save-directory temporary-file-directory)

  ;; Debug
  ;;(setq tramp-verbose 9)
  (setq tramp-debug-buffer nil))
#+end_src
* Completion
** Global completion
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :config
  (use-package helm-package :ensure t)

  ;; Some key
  (global-set-key (kbd "C-x C-r") 'helm-recentf))

(use-package counsel :ensure t)
#+end_src
** Inner buffer completion
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config

  ;; Baseline configuration
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 1
        company-show-numbers t
        company-tooltip-limit 20
        company-etags-ignore-case t)

  ;; Faces
  (unless (face-attribute 'company-tooltip :background)
    (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
    (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
    (set-face-attribute 'company-preview nil :background "black")
    (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
    (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
    (set-face-attribute 'company-scrollbar-fg nil :background "gray40"))

  ;; Default backends
  (setq company-backends
        '((company-files
           company-yasnippet)))

  ;; Activation
  (global-company-mode t))
#+end_src
** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config

  ;; Activation
  (yas-global-mode))
#+end_src
** Templates
#+begin_src emacs-lisp
(use-package yatemplate
  :ensure t
  :config
  (setq yatemplate-dir "~/.emacs.d/third_parties/templates")
  (setq auto-insert-alist nil)
  (yatemplate-fill-alist))
#+end_src
* Project management
** Project management
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    ;; Adding helm support
    (use-package helm-projectile :ensure t)

    ;; Global configuration
    (setq projectile-switch-project-action 'neotree-projectile-action
          projectile-enable-caching t
          projectile-create-missing-test-files t
          projectile-switch-project-action #'projectile-commander
          projectile-ignored-project-function 'file-remote-p
          projectile-mode-line " P")

    ;; Helpers command
    (def-projectile-commander-method ?s
      "Open a *shell* buffer for the project."
      ;; This requires a snapshot version of Projectile.
      (projectile-run-shell))

    (def-projectile-commander-method ?c
      "Run `compile' in the project."
      (projectile-compile-project nil))

    (def-projectile-commander-method ?\C-?
      "Go back to project selection."
      (projectile-switch-project))

    (def-projectile-commander-method ?j
      "Jack-in."
      (let* ((opts (projectile-current-project-files))
             (file (ido-completing-read
                    "Find file: "
                    opts
                    nil nil nil nil
                    (car (cl-member-if
                          (lambda (f)
                            (string-match "core\\.clj\\'" f))
                          opts)))))
        (find-file (expand-file-name
                    file (projectile-project-root)))
        (run-hooks 'projectile-find-file-hook)
        (cider-jack-in)))

    ;; Globally enabling
    (projectile-global-mode)

    ;; Keymap
    (setq projectile-keymap-prefix (kbd "C-x p")))
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config

    ;; Magit helpers
    (use-package magit-annex :ensure t)
    (use-package magit-filenotify :ensure t)
    (use-package magit-find-file :ensure t)
    (use-package magit-gerrit :ensure t)
    (use-package magit-gh-pulls :ensure t)
    (use-package magit-gitflow :ensure t)
    (use-package magit-popup :ensure t)
    (use-package magit-rockstar :ensure t))

  ;; Magit interfaced with github
  (use-package magithub
    :after magit
    :config (magithub-feature-autoinject t))

  ;; Gitconfig edition mode
  (use-package gitconfig-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("/\.gitconfig\'"   . gitconfig-mode))
    (add-to-list 'auto-mode-alist '("/vcs/gitconfig\'" . gitconfig-mode)))

  ;; Git timemachine
  (use-package git-timemachine :ensure t)
#+end_src
** Mercurial
#+begin_src emacs-lisp
(use-package monky :ensure t)
(use-package hgignore-mode :ensure t)
(use-package hgrc-mode :ensure t)
#+end_src
** Some global shortcut management
#+begin_src emacs-lisp

  (defhydra hydra-projectile (:color blue :hint nil :idle 0.4)
    "
                                                                          â­âââââââââââââ
          Files             Search          Buffer             Do         â Projectile â
        â­ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââââââââââ¯
          [_f_] file          [_a_] ag          [_b_] switch         [_g_] magit
          [_l_] file dwim     [_A_] grep        [_v_] show all       [_p_] commander
          [_r_] recent file   [_s_] occur       [_V_] ibuffer        [_i_] info
          [_d_] dir           [_S_] replace     [_K_] kill all
          [_o_] other         [_t_] find tag
          [_u_] test file     [_T_] make tags
          [_h_] root

          Other Window      Run             Cache              Do
        â­âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ¯
          [_F_] file          [_U_] test        [_kc_] clear
          [_L_] dwim          [_m_] compile     [_kk_] add current
          [_D_] dir           [_c_] shell       [_ks_] cleanup
          [_O_] other         [_C_] command     [_kd_] remove
          [_B_] buffer
        --------------------------------------------------------------------------------
              "
    ("<ESC>" nil "quit")
    ("<" hydra-project/body "back")
    ("a"   projectile-ag)
    ("A"   projectile-grep)
    ("b"   projectile-switch-to-buffer)
    ("B"   projectile-switch-to-buffer-other-window)
    ("c"   projectile-run-async-shell-command-in-root)
    ("C"   projectile-run-command-in-root)
    ("d"   projectile-find-dir)
    ("D"   projectile-find-dir-other-window)
    ("f"   projectile-find-file)
    ("F"   projectile-find-file-other-window)
    ("g"   projectile-vc)
    ("h"   projectile-dired)
    ("i"   projectile-project-info)
    ("kc"  projectile-invalidate-cache)
    ("kd"  projectile-remove-known-project)
    ("kk"  projectile-cache-current-file)
    ("K"   projectile-kill-buffers)
    ("ks"  projectile-cleanup-known-projects)
    ("l"   projectile-find-file-dwim)
    ("L"   projectile-find-file-dwim-other-window)
    ("m"   projectile-compile-project)
    ("o"   projectile-find-other-file)
    ("O"   projectile-find-other-file-other-window)
    ("p"   projectile-commander)
    ("r"   projectile-recentf)
    ("s"   projectile-multi-occur)
    ("S"   projectile-replace)
    ("t"   projectile-find-tag)
    ("T"   projectile-regenerate-tags)
    ("u"   projectile-find-test-file)
    ("U"   projectile-test-project)
    ("v"   projectile-display-buffer)
    ("V"   projectile-ibuffer)
    )

  (defhydra hydra-fixmee (:color blue :hint nil :idle 0.4)
    "
                                                                              â­âââââââââ
          Do                                                                  â Fixmee â
        â­ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââââââ¯
          [_x_] TODO & FIXME
          [_X_] toggle
        --------------------------------------------------------------------------------
              "
    ("<ESC>" nil "quit")
    ("<" hydra-project/body "back")
    ("X"   fixmee-mode)
    ("x"   fixmee-view-listing))

  (defhydra hydra-magit (:color blue :hint nil)
    "
                                                                              â­âââââââââ
          Status/Info       Remote           Operations                       â Magit  â
        â­ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââââââ¯
          [_s_] Status      [_f_] Pull       [_c_] commit
          [_l_] Log all     [_p_] Push
          [_d_] Diff
          [_t_] timeline
        --------------------------------------------------------------------------------
              "
    ("<ESC>" nil "quit")
    ("<" hydra-project/body "back")
    ("f" magit-pull)
    ("p" magit-push)
    ("c" magit-commit)
    ("d" magit-diff)
    ("l" magit-log-all)
    ("s" magit-status)
    ("t" git-timeline)
    )


  (defhydra hydra-project (:color blue :hint nil)
    "
                                                                              â­âââââââââ
          Selection                                                           â Main   â
        â­ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââââââ¯
          [_d_] dash projects     [_p_] projectile
          [_f_] fixmee            [_c_] org-capture
          [_m_] magit
        --------------------------------------------------------------------------------
              "
    ("<ESC>" nil "quit")
    ("c"   org-capture)
    ("d"   org-dashboard-display)
    ("p"   hydra-projectile/body)
    ("f"   hydra-fixmee/body)
    ("m"   hydra-magit/body)
    )


  (global-set-key (kbd "<f4>") 'hydra-project/body)
#+end_src
* Compilation
** General
#+begin_src emacs-lisp
(if (boundp 'compile-auto-highlight)
	(progn
	  (setq compile-auto-highlight t)
	  (setq compilation-finish-functions 'highlight-error-lines)))
#+end_src
** On the fly checking
#+begin_src emacs-lisp
(use-package flycheck :ensure t)
(use-package flycheck-stack :ensure t)
#+end_src
** TODO Gradle
#+begin_src emacs-lisp
;; (use-package gradle-mode
;;   ;; FIXME: change that !
;;   :load-path (lambda () (format "%s/subpart/emacs-gradle-mode" config-basedir))
;;   :config
;;   (setq gradle-gradlew-executable "./gradlew")
;;   (setq gradle-use-gradlew t)
;;   (gradle-mode)
;;   )
#+end_src
* Languages
** TODO Java/Groovy/Gradle
#+begin_src emacs-lisp
(use-package meghanada
  :ensure t
  :config
  (add-hook 'java-mode-hook
            (lambda ()
              ;; meghanada-mode on
              (meghanada-mode t)
              (add-hook 'before-save-hook 'delete-trailing-whitespace)))
  )

(use-package javadoc-lookup
  :ensure t
  :config
  (when (file-exists-p "/usr/share/doc/openjdk-8-jdk/api")
    (javadoc-add-roots "/usr/share/doc/openjdk-8-jdk/api"))

  (javadoc-add-artifacts [org.lwjgl.lwjgl lwjgl "2.8.2"]
                         [com.nullprogram native-guide "0.2"]
                         [org.apache.commons commons-math3 "3.0"]))

(use-package groovy-mode
  :ensure t
  :config

  ;;; use groovy-mode when file ends in .groovy or has #!/bin/groovy at start
  (autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code." t)
  (autoload 'run-groovy "inf-groovy" "Run an inferior Groovy process")
  (autoload 'inf-groovy-keys "inf-groovy" "Set local key defs for inf-groovy in groovy-mode")

  ;; Adding groovy keys
  (add-hook 'groovy-mode-hook
            '(lambda ()
               (inf-groovy-keys)))

  ;; ;; can set groovy-home here, if not in environment
  ;; (setq inferior-groovy-mode-hook
  ;;       '(lambda()
  ;;          (setq groovy-home "/Users/sclayman/Downloads/groovy-1.7.1/")))

  ;; .groovy/.gradle files should be in groovy-mode
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gradle$" . groovy-mode))

  ;; This _might_ not work with Aquamacs (not sure what value it offers)
  (add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))
  (add-to-list 'interpreter-mode-alist '("gradle" . groovy-mode))
  )

(use-package groovy-imports :ensure t)
#+end_src
** Latex
*** Global
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :config

    ;; Indentation
    (setq LaTeX-indent-level 4)
    (setq LaTeX-item-indent 0)
    (setq TeX-brace-indent-level 4)
    (setq TeX-newline-function 'newline-and-indent)

    ;; Spelling
    (setq ispell-tex-skip-alist
          '((
             ;;("%\\[" . "%\\]") ; AMStex block comment...
             ;; All the standard LaTeX keywords from L. Lamport's guide:
             ;; \cite, \hspace, \hspace*, \hyphenation, \include, \includeonly
             ;; \input, \label, \nocite, \rule (in ispell - rest included here)
             ("\\\\addcontentsline"              ispell-tex-arg-end 2)
             ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end)
             ("\\\\\\([aA]lph\\|arabic\\)"   ispell-tex-arg-end)
             ("\\\\author"                         ispell-tex-arg-end)
             ;; New regexps here --- kjh
             ("\\\\\\(text\\|paren\\)cite" ispell-tex-arg-end)
             ("\\\\cite\\(t\\|p\\|year\\|yearpar\\)" ispell-tex-arg-end)
             ("\\\\bibliographystyle"                ispell-tex-arg-end)
             ("\\\\makebox"                  ispell-tex-arg-end 0)
             ("\\\\e?psfig"                  ispell-tex-arg-end)
             ("\\\\document\\(class\\|style\\)" .
              "\\\\begin[ \t\n]*{[ \t\n]*document[ \t\n]*}"))
            (
             ;; delimited with \begin.  In ispell: displaymath, eqnarray,
             ;; eqnarray*, equation, minipage, picture, tabular,
             ;; tabular* (ispell)
             ("\\(figure\\|table\\)\\*?"     ispell-tex-arg-end 0)
             ("\\(equation\\|eqnarray\\)\\*?"     ispell-tex-arg-end 0)
             ("list"                                 ispell-tex-arg-end 2)
             ("program" . "\\\\end[ \t\n]*{[ \t\n]*program[ \t\n]*}")
             ("verbatim\\*?"."\\\\end[ \t\n]*{[ \t\n]*verbatim\\*?[ \t\n]*}")
             ("lstlisting\\*?"."\\\\end[ \t\n]*{[ \t\n]*lstlisting\\*?[ \t\n]*}"))))  ;; S
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)


    ;; ;; Completion
    ;; (setq TeX-auto-global (format "%s/auctex/style" generated-basedir))
    ;; (add-to-list 'TeX-style-path TeX-auto-global)

    (use-package company-auctex
      :ensure t
      :config
      (company-auctex-init)
      (add-to-list 'company-backends 'company-bibtex))


    ;; Mathematics
    (use-package latex-math-preview
      :ensure t
      :config
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (use-package company-math :ensure t))

    ;; Some minor improvement
    (use-package latex-extra :ensure t)
    (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
    (setq-default TeX-master nil)
    (setq TeX-parse-self t)
    (setq TeX-auto-save t)

    ;; Folding at 100 instead of 80
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (TeX-fold-mode t)
                (setq fill-column 100)))

    ;; We don't parse verbatim
    (add-to-list 'LaTeX-verbatim-environments "comment")

    ;; Bibtex
    (use-package company-bibtex :ensure t)
    (setq bibtex-align-at-equal-sign t
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-year-title-separator ""
          bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
          bibtex-autokey-titleword-length 30
          bibtex-autokey-titlewords 1)



    ;; Compilation
    (use-package auctex-latexmk
      :ensure t
      :config
      (auctex-latexmk-setup)

      ;; PDF by default
      (TeX-global-PDF-mode 1)

      ;; Not whow the results by default
      (setq TeX-show-compilation nil)

      ;; Redine TeX-output-mode to get the color !
      (define-derived-mode TeX-output-mode TeX-special-mode "LaTeX Output"
        "Major mode for viewing TeX output.
    \\{TeX-output-mode-map} "
        :syntax-table nil
        (set (make-local-variable 'revert-buffer-function)
             #'TeX-output-revert-buffer)

        (set (make-local-variable 'font-lock-defaults)
             '((("^!.*" . font-lock-warning-face) ; LaTeX error
                ("^-+$" . font-lock-builtin-face) ; latexmk divider
                ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" . font-lock-builtin-face)
                ;; .....
                )))

        ;; special-mode makes it read-only which prevents input from TeX.
        (setq buffer-read-only nil))
      )

    ;; View / correlation
    (setq TeX-source-correlate-method 'synctex)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    )
#+end_src
*** References
#+begin_src emacs-lisp
  (use-package reftex
    :config

    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    (setq reftex-save-parse-info t)
    (setq reftex-enable-partial-scans t)
    (setq reftex-use-multiple-selection-buffers t)
    (setq reftex-plug-into-AUCTeX t)
    (setq reftex-vref-is-default t)
    (setq reftex-plug-into-AUCTeX t)
    (setq reftex-use-multiple-selection-buffers t)
    (setq reftex-cite-format
          '(
            (?\C-m . "\\cite[]{%l}")
            (?t . "\\textcite{%l}")
            (?a . "\\autocite[]{%l}")
            (?p . "\\parencite{%l}")
            (?f . "\\footcite[][]{%l}")
            (?F . "\\fullcite[]{%l}")
            (?x . "[]{%l}")
            (?X . "{%l}")
            ))

    (setq font-latex-match-reference-keywords
          '(("cite" "[{")
            ("cites" "[{}]")
            ("footcite" "[{")
            ("footcites" "[{")
            ("parencite" "[{")
            ("textcite" "[{")
            ("fullcite" "[{")
            ("citetitle" "[{")
            ("citetitles" "[{")
            ("headlessfullcite" "[{")))

    (setq reftex-cite-prompt-optional-args nil)
    (setq reftex-cite-cleanup-optional-args t)
    )
#+end_src
** TODO Python
** R
#+begin_src emacs-lisp
(use-package ess :ensure t)
(use-package ess-R-data-view :ensure t)
(use-package ess-R-object-popup :ensure t)
(use-package ess-smart-equals :ensure t)
(use-package ess-smart-underscore :ensure t)
(use-package ess-view :ensure t)
(use-package company-statistics :ensure t)
#+end_src
* Org-mode
** Global part
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config

    ;; Global
    (setq org-startup-indented t
          org-enforce-todo-dependencies t
          org-cycle-separator-lines 2
          org-blank-before-new-entry (quote ((heading) (plain-list-item . auto)))
          org-insert-heading-respect-content nil
          org-reverse-note-order nil
          org-show-following-heading t
          org-show-hierarchy-above t
          org-show-siblings (quote ((default)))
          org-id-method (quote uuidgen)
          org-deadline-warning-days 30
          org-table-export-default-format "orgtbl-to-csv"
          org-src-window-setup 'other-frame ; Use the current window for C-c ' source editing
          org-clone-delete-id t
          org-cycle-include-plain-lists t
          org-src-fontify-natively t
          org-hide-emphasis-markers t)

    (use-package org-bullets :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    ;; TODO to sort
    (use-package org-checklist)
    (use-package ob-exp)
    (use-package ox-bibtex)
    (use-package org-protocol)
    (use-package org-dashboard :ensure t)

    ;; Todo part
    (setq org-todo-keywords '((sequence
                               "TODO(t)" "REVIEW(r)" "NEXT(n)" "STARTED(s)"
                               "WAITING(w)" "DELEGATED(e)" "MAYBE(m)" "|"
                               "DONE(d)" "NOTE(n)" "DEFERRED(f)" "CANCELLED(c@/!)"))

          org-todo-state-tags-triggers '(("CANCELLED" ("CANCELLED" . t))
                                         ("WAITING" ("WAITING" . t))
                                         ("HOLD" ("WAITING" . t) ("HOLD" . t))
                                         (done ("WAITING") ("HOLD"))
                                         ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("IN PROGRESS" ("NEXT") ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))
          org-todo-keyword-faces '(("TODO" :background "red1" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
                                   ("REVIEW" :background "orange" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
                                   ("NEXT" :background "red1" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
                                   ("STARTED" :background "orange" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
                                   ("WAITING" :background "yellow" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
                                   ("DEFERRED" :background "gold" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
                                   ("DELEGATED" :background "gold" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
                                   ("MAYBE" :background "gray" :foreground "black" :weight bold :box (:line-width 2 :style released-button))
                                   ("DONE" :background "forest green" :weight bold :box (:line-width 2 :style released-button))
                                   ("CANCELLED" :background "lime green" :foreground "black" :weight bold :box (:line-width 2 :style released-button))))


    ;; Org priority faces
    ;; Priority definition
    (setq org-highest-priority ?A
          org-lowest-priority ?E
          org-default-priority ?C
          org-priority-faces '((?A . (:foreground "red" :weight bold))
                               (?B . (:foreground "orange"  :weight bold))
                               (?C . (:foreground "orange"))
                               (?D . (:foreground "forest green"))
                               (?E . (:foreground "forest green"))))

    ;; Archiving
    (setq org-archive-mark-done t
          org-log-done 'time
          org-archive-location "%s_archive::* Archived Tasks")
    )
#+end_src
** Calendar / Agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :config

    ;; Todo part
    (when (file-exists-p "~/Dropbox/org/todo/todo.org")
      (setq org-agenda-files
            (append org-agenda-files '("~/Dropbox/org/todo/todo.org"))))

    (when (file-exists-p "~/Dropbox/org/organisation/bookmarks.org")
      (setq org-agenda-files
            (append org-agenda-files '("~/Dropbox/org/organisation/bookmarks.org"))))

    (when (file-exists-p "~/Calendars")
      (setq org-agenda-files
          (append org-agenda-files (directory-files "~/Calendars/" t "^.*\\.org$"))))


    ;; Deadline management
    (setq org-agenda-include-diary nil)
    (setq org-deadline-warning-days 7)
    (setq org-timeline-show-empty-dates t)

    ;; Some commands
    (setq org-agenda-custom-commands
          '(
            ("D" todo "DONE")

            ("w" "Work and administrative"
             ((agenda)
              (tags-todo "WORK")
              (tags-todo "OFFICE")
              (tags-todo "ADMIN")
              ))

            ("p" "personnal"
             ((agenda)
              (tags-todo "PERSONNAL")))

            ("d" "Daily Action List"
             ((agenda "" ((org-agenda-ndays 1)
                          (org-agenda-sorting-strategy
                           (quote ((agenda time-up priority-down tag-up) )))
                          (org-deadline-warning-days 0)
                          ))))
            )
          )

    ;; Agenda view shortcuts
    (use-package hydra
      :config

      (define-key org-agenda-mode-map "v" 'hydra-org-agenda-view/body)

      (defun org-agenda-cts ()
        (let ((args (get-text-property
                     (min (1- (point-max)) (point))
                     'org-last-args)))
          (nth 2 args)))


      (defhydra hydra-org-agenda-view (:color blue :hint none)
        "
                                                                            â­âââââââââââââ
                                                                            â Org-agenda â
          â­ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââââââââââ¯
           _d_: ?d? day        _g_: time grid=?g? _a_: arch-trees
           _w_: ?w? week       _[_: inactive      _A_: arch-files
           _t_: ?t? fortnight  _f_: follow=?f?    _r_: report=?r?
           _m_: ?m? month      _e_: entry =?e?    _D_: diary=?D?
           _y_: ?y? year       _q_: quit          _L__l__c_: ?l?
    "

        ("SPC" org-agenda-reset-view)
        ("d" org-agenda-day-view
         (if (eq 'day (org-agenda-cts))
             "[x]" "[ ]"))
        ("w" org-agenda-week-view
         (if (eq 'week (org-agenda-cts))
             "[x]" "[ ]"))
        ("t" org-agenda-fortnight-view
         (if (eq 'fortnight (org-agenda-cts))
             "[x]" "[ ]"))
        ("m" org-agenda-month-view
         (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
        ("y" org-agenda-year-view
         (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
        ("l" org-agenda-log-mode
         (format "% -3S" org-agenda-show-log))
        ("L" (org-agenda-log-mode '(4)))
        ("c" (org-agenda-log-mode 'clockcheck))
        ("f" org-agenda-follow-mode
         (format "% -3S" org-agenda-follow-mode))
        ("a" org-agenda-archives-mode)
        ("A" (org-agenda-archives-mode 'files))
        ("r" org-agenda-clockreport-mode
         (format "% -3S" org-agenda-clockreport-mode))
        ("e" org-agenda-entry-text-mode
         (format "% -3S" org-agenda-entry-text-mode))
        ("g" org-agenda-toggle-time-grid
         (format "% -3S" org-agenda-use-time-grid))
        ("D" org-agenda-toggle-diary
         (format "% -3S" org-agenda-include-diary))
        ("!" org-agenda-toggle-deadlines)
        ("["
         (let ((org-agenda-include-inactive-timestamps t))
           (org-agenda-check-type t 'timeline 'agenda)
           (org-agenda-redo)))
        ("q" (message "Abort") :exit t)))
      (global-set-key (kbd "<f12>") 'org-agenda))
#+end_src
** Capturing
#+begin_src emacs-lisp
  (use-package org-capture
    :config

    (setq org-capture-templates
          `(
            ("t" "ToDo Entry" entry
             (file+headline "~/Dropbox/org/todo/todo.org" "To sort")
             "* TODO %?\n  %i\n  %a")))
#+end_src
** Project/Org-mode agenda/todo list bindings
#+begin_src emacs-lisp
(use-package org-projectile
  :ensure t
  :config
  (org-projectile:per-repo)
  (setq org-projectile:per-repo-filename "todo.org")
  (setq org-agenda-files
        (append org-agenda-files (org-projectile:todo-files))))
#+end_src
** Editing
#+begin_src emacs-lisp
  (use-package org-notebook :ensure t)

  (setq org-list-allow-alphabetical t) ;; FIXME quoi qu'est ce?

  ;; Add packages
  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar"
        org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")

  ;; Display images directly in the buffer
  (setq org-babel-results-keyword "results")
  (add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)
  (defun bh/display-inline-images ()
    (condition-case nil
        (org-display-inline-images)
      (error nil)))

  ;; Add languages
  (use-package ob-ipython :ensure t)
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (dot . t)
                                 (ditaa . t)
                                 ;; (R . t) [FIXME: see for R]
                                 (ipython . t)
                                 (ruby . t)
                                 (gnuplot . t)
                                 (clojure . t)
                                 (sh . t)
                                 (ledger . t)
                                 (org . t)
                                 (plantuml . t)
                                 (latex . t)))

  ; Do not prompt to confirm evaluation [DANGEROUS BE CAREFULL]
  (setq org-confirm-babel-evaluate nil)

  ; Define specific modes for specific tools
  (add-to-list 'org-src-lang-modes '("plantuml" . fundamental))
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))

  ;; Don't enable this because it breaks access to emacs from my Android phone
  (setq org-startup-with-inline-images nil)
#+end_src
*** Block template
#+begin_src emacs-lisp
  (use-package hydra :ensure t
    :config

    ;; Define the templates
    (setq org-structure-template-alist
          '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
            ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
            ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
            ("v" "#+begin_verse\n?\n#+end_verse" "<verse>\n?\n/verse>")
            ("c" "#+begin_center\n?\n#+end_center" "<center>\n?\n/center>")
            ("l" "#+begin_latex\n?\n#+end_latex" "<literal style=\"latex\">\n?\n</literal>")
            ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
            ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
            ("H" "#+html: " "<literal style=\"html\">?</literal>")
            ("a" "#+begin_ascii\n?\n#+end_ascii")
            ("A" "#+ascii: ")
            ("i" "#+index: ?" "#+index: ?")
            ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))

    ;; Shortcuts
    (defun hot-expand (str &optional mod)
      "Expand org template."
      (let (text)
        (when (region-active-p)
          (setq text (buffer-substring (region-beginning) (region-end)))
          (delete-region (region-beginning) (region-end)))
        (insert str)
        (org-try-structure-completion)
        (when mod (insert mod) (forward-line))
        (when text (insert text))))

    (defhydra hydra-org-template (:color blue :hint nil)
      "
                                                                        â­âââââââââââââ
        block               src block         structure                 â Org-block  â
      â­ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââââââââââ¯
        [_c_] center        [_s_] src         [_L_] LATEX:
        [_q_] quote         [_e_] emacs lisp  [_i_] index:
        [_E_] example       [_p_] python      [_I_] INCLUDE:
        [_v_] verse         [_P_] perl        [_H_] HTML:
        [_a_] ascii         [_u_] Plantuml    [_A_] ASCII:
        [_l_] latex         [_d_] ditaa
        [_h_] html          [_S_] shell
  "
      ("s" (hot-expand "<s"))
      ("E" (hot-expand "<e"))
      ("q" (hot-expand "<q"))
      ("v" (hot-expand "<v"))
      ("c" (hot-expand "<c"))
      ("l" (hot-expand "<l"))
      ("h" (hot-expand "<h"))
      ("a" (hot-expand "<a"))
      ("L" (hot-expand "<L"))
      ("i" (hot-expand "<i"))
      ("e" (hot-expand "<s" "emacs-lisp"))
      ("p" (hot-expand "<s" "python"))
      ("P" (hot-expand "<s" "perl"))
      ("S" (hot-expand "<s" "sh"))
      ("d" (hot-expand "<s" "ditaa :file CHANGE.png :cache yes"))
      ("u" (hot-expand "<s" "plantuml :file CHANGE.svg :cache yes"))
      ("I" (hot-expand "<I"))
      ("H" (hot-expand "<H"))
      ("A" (hot-expand "<A"))
      ("<" self-insert-command "ins")
      ("ESC" nil "quit"))

    (define-key org-mode-map "<"
      (lambda () (interactive)
        (if (or (region-active-p) (looking-back "^"))
            (hydra-org-template/body)
          (self-insert-command 1)))))
#+end_src
** Exporting
*** HTML
#+begin_src emacs-lisp
  (use-package ox-html
    :config
    (use-package htmlize :ensure t)
    (use-package ox-reveal :ensure t)

    (setq org-html-xml-declaration '(("html" . "")
                                   ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                   ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))
        org-export-html-inline-images t
        org-export-with-sub-superscripts nil
        org-export-html-style-extra "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\" />"
        org-export-html-style-include-default nil
        org-export-htmlize-output-type 'css ; Do not generate internal css formatting for HTML exports
        )

    (defun endless/export-audio-link (path desc format)
      "Export org audio links to hmtl."
      (cl-case format
        (html (format "<audio src=\"%s\" controls>%s</audio>" path (or desc "")))))
    (org-add-link-type "audio" #'ignore #'endless/export-audio-link)


    (defun endless/export-video-link (path desc format)
      "Export org video links to hmtl."
      (cl-case format
        (html (format "<video controls src=\"%s\"></video>" path (or desc "")))))
    (org-add-link-type "video" #'ignore #'endless/export-video-link)

    )
#+end_src
*** LaTeX
#+begin_src emacs-lisp
(use-package ox-latex
  :config
  (setq org-latex-listings t
	org-export-with-LaTeX-fragments t
	org-latex-pdf-process (list "latexmk -f -pdf %f")))
#+end_src
*** Beamer
#+begin_src emacs-lisp
(use-package ox-beamer
  :config
  (defun my-beamer-bold (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))
  (add-to-list 'org-export-filter-bold-functions 'my-beamer-bold))
#+end_src
*** Docbook
#+begin_src emacs-lisp
(setq org-export-docbook-xsl-fo-proc-command "fop %s %s"
      org-export-docbook-xslt-proc-command "xsltproc --output %s /usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl %s")
#+end_src
*** Markdown
#+begin_src emacs-lisp
(use-package ox-md
  :config
  (use-package ox-gfm :ensure t :config (require 'ox-gfm)))
#+end_src
* PDF Viewing
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config

    (pdf-tools-install t t t)
    (add-hook 'pdf-view-mode-hook
              (lambda ()
                (pdf-misc-size-indication-minor-mode)
                (pdf-links-minor-mode)
                (pdf-isearch-minor-mode)))

    ;; Use pdf-tools to open PDF files
    (eval-after-load "latex"
      (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
            TeX-source-correlate-start-server t))
    (add-to-list 'auto-mode-alist (cons "\\.pdf$" 'pdf-view-mode))
    (add-to-list 'org-file-apps
                 '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))

    ;; ;; Update PDF buffers after successful LaTeX Aruns
    ;; (eval-after-load "latex"
    ;;   (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
    ;;             'TeX-revert-document-buffer))

    ;; Key bindings
    (defhydra hydra-pdftools (:color blue :hint nil)
      "
                                                                        â­ââââââââââââ
         Move  History   Scale/Fit     Annotations  Search/Link    Do   â PDF Tools â
     â­âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´ââââââââââââ¯
           ^^_g_^^      _B_    ^â§^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
           ^^^â^^^      ^â^    _H_    ^â^  â¦ _W_ â¤   [_am_] markup  [_o_] outline   [_i_] info
           ^^_p_^^      ^ ^    ^â¥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
           ^^^â^^^      ^â^  â­â^â^ââ  ^â^  â­â^ ^ââ   [_ad_] delete  [_f_] search link
      _h_ âpag_e_â _l_  _N_  â _P_ â  _-_    _b_     [_aa_] dired
           ^^^â^^^      ^ ^  â°â^â^ââ¯  ^ ^  â°â^ ^ââ¯   [_y_]  yank
           ^^_n_^^      ^ ^  _r_eset slice box
           ^^^â^^^
           ^^_G_^^
     --------------------------------------------------------------------------------
          "
      ("\\" hydra-master/body "back")
      ("<ESC>" nil "quit")
      ("al" pdf-annot-list-annotations)
      ("ad" pdf-annot-delete)
      ("aa" pdf-annot-attachment-dired)
      ("am" pdf-annot-add-markup-annotation)
      ("at" pdf-annot-add-text-annotation)
      ("y"  pdf-view-kill-ring-save)
      ("+" pdf-view-enlarge :color red)
      ("-" pdf-view-shrink :color red)
      ("0" pdf-view-scale-reset)
      ("H" pdf-view-fit-height-to-window)
      ("W" pdf-view-fit-width-to-window)
      ("P" pdf-view-fit-page-to-window)
      ("n" pdf-view-next-page-command :color red)
      ("p" pdf-view-previous-page-command :color red)
      ("d" pdf-view-dark-minor-mode)
      ("b" pdf-view-set-slice-from-bounding-box)
      ("r" pdf-view-reset-slice)
      ("g" pdf-view-first-page)
      ("G" pdf-view-last-page)
      ("e" pdf-view-goto-page)
      ("o" pdf-outline)
      ("s" pdf-occur)
      ("i" pdf-misc-display-metadata)
      ("u" pdf-view-revert-buffer)
      ("F" pdf-links-action-perfom)
      ("f" pdf-links-isearch-link)
      ("B" pdf-history-backward :color red)
      ("N" pdf-history-forward :color red)
      ("l" image-forward-hscroll :color red)
      ("h" image-backward-hscroll :color red))

    (bind-keys :map pdf-view-mode-map
               ("/" . hydra-pdftools/body)
               ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
               ("g"  . pdf-view-first-page)
               ("G"  . pdf-view-last-page)
               ("l"  . image-forward-hscroll)
               ("h"  . image-backward-hscroll)
               ("j"  . pdf-view-next-page)
               ("k"  . pdf-view-previous-page)
               ("e"  . pdf-view-goto-page)
               ("u"  . pdf-view-revert-buffer)
               ("al" . pdf-annot-list-annotations)
               ("ad" . pdf-annot-delete)
               ("aa" . pdf-annot-attachment-dired)
               ("am" . pdf-annot-add-markup-annotation)
               ("at" . pdf-annot-add-text-annotation)
               ("y"  . pdf-view-kill-ring-save)
               ("i"  . pdf-misc-display-metadata)
               ("s"  . pdf-occur)
               ("b"  . pdf-view-set-slice-from-bounding-box)
               ("r"  . pdf-view-reset-slice)))
#+end_src

* Graphic
** Theme (github)
#+begin_src emacs-lisp
(use-package github-theme
  :ensure t
  :config
  (load-theme 'github t))
#+end_src
** Buffer tweaks
*** Parenthesis
#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config

  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

  (sp-pair "'" nil :actions :rem))

(use-package rainbow-delimiters
  :ensure t
  :config

  (custom-set-faces
   '(rainbow-delimiters-mismatched-face ((t (:foreground "white" :background "red" :weight bold))))
   '(rainbow-delimiters-unmatched-face ((t (:foreground "white" :background "red" :weight bold))))

   ;; show parents (in case of rainbow failing !)
   '(show-paren-match ((t (:foreground "white" :background "green" :weight bold))))
   '(show-paren-mismatch ((t (:foreground "white" :background "red" :weight bold))))
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)))
#+end_src
*** Line/fringe
#+begin_src emacs-lisp
(use-package nlinum
  :ensure t
  :config
  (line-number-mode t)
  (column-number-mode t)
  (global-nlinum-mode t))

(use-package diff-hl
  :ensure t
  :config
  (global-diff-hl-mode))

(size-indication-mode t)
(fringe-mode 10)
#+end_src
*** Mode line
#+begin_src emacs-lisp
(use-package spaceline-all-the-icons
  :ensure t
  :after spaceline
  :init

  ;; Separator configuration
  (setq spaceline-all-the-icons-separator-type 'wave
        spaceline-separator-dir-left '(left . left)
        spaceline-separator-dir-right '(right . right)
        spaceline-minor-modes-separator " ")

  ;; Spaceline loading
  (spaceline-all-the-icons-theme)

  ;; Some  configurations
  (require 'spaceline-config)
  (spaceline-helm-mode)
  (use-package info+
    :ensure t
    :init
    (spaceline-info-mode))

  ;; Print the battery status
  (use-package fancy-battery
    :ensure t
    :init
    (add-hook 'after-init-hook #'fancy-battery-mode)
    (display-battery-mode -1))

  ;; Paradox support for the mode line
  (spaceline-all-the-icons--setup-paradox))
#+end_src
* COMMENT some extra configuration
